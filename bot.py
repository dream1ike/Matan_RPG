from dotenv import load_dotenv
load_dotenv()

import os
import random
import time
import asyncio
import asyncpg
from random import randint, choice
from aiogram import Bot, Dispatcher, types
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
)

# –í –ø–∞–º—è—Ç–∏: —Ç–µ–∫—É—â–∏–µ –±–∏—Ç–≤—ã –∏ –∫–≤–∏–∑—ã {chat_id: {...}}
active_battles: dict[int, dict] = {}
active_quiz: dict[int, dict] = {}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
DB_DSN = os.getenv("DATABASE_URL")
API_TOKEN = os.getenv("TG_TOKEN")

async def setup_locations(db):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    locations = await db.fetch("SELECT * FROM locations")
    if not locations:
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await db.execute(
            """
            INSERT INTO locations (name, description) VALUES
            ('–õ–æ–∫–∞—Ü–∏—è 1', '–û–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ 1'),
            ('–õ–æ–∫–∞—Ü–∏—è 2', '–û–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ 2'),
            ('–õ–æ–∫–∞—Ü–∏—è 3', '–û–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ 3')
            """
        )

async def log_action(db, user_id, action):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (timestamp)
    ts = int(time.time())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
    user_exists = await db.fetchrow(
        "SELECT id FROM users WHERE tg_id = $1", user_id
    )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É users
    if not user_exists:
        await db.execute(
            "INSERT INTO users(tg_id, username) VALUES($1, $2)",
            user_id, "unknown"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "unknown" –∫–∞–∫ username, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        )
        user_exists = await db.fetchrow(
            "SELECT id FROM users WHERE tg_id = $1", user_id
        )

    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É logs
    await db.execute(
        "INSERT INTO logs (user_id, action, ts) VALUES ($1, $2, to_timestamp($3))",
        user_exists['id'], action, ts
    )


async def main():
    db = await asyncpg.create_pool(dsn=DB_DSN)
    bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()

    # –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–∫–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await setup_locations(db)

    # –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    main_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/status"), KeyboardButton(text="/locations")],
            [KeyboardButton(text="/inventory"), KeyboardButton(text="/stats")],
        ],
        resize_keyboard=True
    )

    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        await db.execute(
            """
            INSERT INTO users (tg_id, username)
            VALUES ($1, $2)
            ON CONFLICT (tg_id) DO NOTHING
            """,
            message.from_user.id,
            message.from_user.username,
        )
        row = await db.fetchrow(
            "SELECT id FROM users WHERE tg_id = $1",
            message.from_user.id,
        )
        await db.execute(
            """
            INSERT INTO characters (user_id)
            VALUES ($1)
            ON CONFLICT (user_id) DO NOTHING
            """,
            row["id"],
        )
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SQL-Adventure! üëã\n"
            "–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω. /status ‚Äî —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
        )

    @dp.message(Command("status"))
    async def cmd_status(message: types.Message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Å—Ç–∞—Ç—É—Å–∞
        rec = await db.fetchrow(
            "SELECT hp, max_hp, mana, max_mana, exp "
            "FROM characters c JOIN users u ON c.user_id=u.id "
            "WHERE u.tg_id=$1", message.from_user.id
        )
        
        # –ï—Å–ª–∏ HP <= 0, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if rec['hp'] <= 0:
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP, Mana –∏ Exp
            await db.execute(
                """
                UPDATE characters 
                SET hp = 100, mana = 50, exp = 0 
                WHERE user_id = (SELECT id FROM users WHERE tg_id = $1)
                """, message.from_user.id
            )
            rec = await db.fetchrow(
                "SELECT hp, max_hp, mana, max_mana, exp "
                "FROM characters c JOIN users u ON c.user_id=u.id "
                "WHERE u.tg_id=$1", message.from_user.id
            )
            await message.answer(
                "üíÄ –í—ã –ø–æ–≥–∏–±–ª–∏! –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ã–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb
            )
        
        await message.answer(
            f"‚ù§Ô∏è HP: {rec['hp']}/{rec['max_hp']}\n"
            f"üîÆ Mana: {rec['mana']}/{rec['max_mana']}\n"
            f"‚≠ê Exp: {rec['exp']}",
            reply_markup=main_kb
        )

    @dp.message(Command("locations"))
    async def cmd_locations(message: types.Message):
        rows = await db.fetch("SELECT id,name FROM locations ORDER BY id")
        buttons = [InlineKeyboardButton(text=f"{r['id']}. {r['name']}", callback_data=f"explore_{r['id']}") for r in rows]
        inline_rows = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
        await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=InlineKeyboardMarkup(inline_keyboard=inline_rows))

    @dp.callback_query(lambda c: c.data and c.data.startswith("explore_"))
    async def explore_callback(cb: types.CallbackQuery):
        loc_id = int(cb.data.split("_")[1])
        cr = await db.fetchrow(
            "SELECT id,name,hp FROM creatures WHERE location_id=$1 ORDER BY RANDOM() LIMIT 1", loc_id
        )
        if not cr:
            await cb.message.edit_text("–õ–æ–∫–∞—Ü–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return await cb.answer()
        active_battles[cb.message.chat.id] = {"id": cr['id'], "name": cr['name'], "hp": cr['hp']}
        # –ö–Ω–æ–ø–∫–∏ —Å—Ç–µ–ø–µ–Ω–µ–π –∞—Ç–∞–∫–∏
        btn1 = InlineKeyboardButton(text="ü•â –õ–∏–Ω–µ–π–Ω–æ–µ (10)", callback_data="quiz_1")
        btn2 = InlineKeyboardButton(text="ü•à –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (20)", callback_data="quiz_2")
        btn3 = InlineKeyboardButton(text="ü•á –ö—É–±–∏—á–µ—Å–∫–æ–µ (30)", callback_data="quiz_3")
        markup = InlineKeyboardMarkup(inline_keyboard=[[btn1, btn2, btn3]])
        await cb.message.edit_text(
            f"üëæ <b>{cr['name']}</b> (HP: {cr['hp']}) –ø–æ—è–≤–∏–ª—Å—è! –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å –∞—Ç–∞–∫–∏:",
            reply_markup=markup
        )
        await cb.answer()

    @dp.callback_query(lambda c: c.data and c.data.startswith("quiz_"))
    async def quiz_callback(cb: types.CallbackQuery):
        degree = int(cb.data.split("_")[1])
        dmg = degree * 10
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ active_quiz
        quiz_data = {"degree": degree, "dmg": dmg}
        if degree == 1:
            a = randint(1, 10)
            x = randint(-10, 10)
            b = -a * x
            question = f"{a}x + {b} = 0"
            correct = f"x={x}"
            opts = [correct]
            for _ in range(3):
                xw = x + choice([-5, -3, -2, 2, 3, 5])
                opts.append(f"x={xw}")
            random.shuffle(opts)
            quiz_data.update({"type": "linear", "question": question, "options": opts, "correct_answer": correct})
        elif degree == 2:
            x1, x2 = randint(-5, 5), randint(-5, 5)
            a = randint(1, 5)
            b = -a * (x1 + x2)
            c_ = a * x1 * x2
            question = f"{a}x¬≤ + {b}x + {c_} = 0"
            correct = f"x‚ÇÅ={x1},x‚ÇÇ={x2}"
            opts = [correct]
            for _ in range(3):
                opts.append(f"x‚ÇÅ={x1 + choice([-2, 2])},x‚ÇÇ={x2 + choice([-2, 2])}")
            random.shuffle(opts)
            quiz_data.update({"type": "quadratic", "question": question, "options": opts, "correct_answer": correct})
        else:
            # –∫—É–±–∏—á–µ—Å–∫–æ–µ —Å —Ç—Ä–µ–º—è –∫–æ—Ä–Ω—è–º–∏
            roots = [randint(-3, 3) for _ in range(3)]
            a = randint(1, 3)
            r1, r2, r3 = roots
            b = -a * (r1 + r2 + r3)
            c_ = a * (r1 * r2 + r1 * r3 + r2 * r3)
            d = -a * r1 * r2 * r3
            question = f"{a}x¬≥ + {b}x¬≤ + {c_}x + {d} = 0"
            correct = f"x‚ÇÅ={r1},x‚ÇÇ={r2},x‚ÇÉ={r3}"
            opts = [correct]
            for _ in range(3):
                w = [r + choice([-1, 1, 2, -2]) for r in roots]
                opts.append(f"x‚ÇÅ={w[0]},x‚ÇÇ={w[1]},x‚ÇÉ={w[2]}")
            random.shuffle(opts)
            quiz_data.update({"type": "cubic", "question": question, "options": opts, "correct_answer": correct})

        active_quiz[cb.message.chat.id] = quiz_data
        # –ö–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = []
        opts = quiz_data["options"]
        for i in range(0, 4, 2):
            row = []
            for j in range(2):
                row.append(InlineKeyboardButton(text=opts[i + j], callback_data=f"ans_{i + j}"))
            keyboard.append(row)
        await cb.message.edit_text(quiz_data["question"], reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await cb.answer()

    @dp.message(Command("inventory"))
    async def cmd_inventory(message: types.Message):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        user_id = message.from_user.id
        inventory_items = await db.fetch(
            """
            SELECT i.name, iv.count
            FROM inventory iv
            JOIN items i ON iv.item_id = i.id
            WHERE iv.user_id = (SELECT id FROM users WHERE tg_id = $1)
            """, user_id
        )

        if not inventory_items:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.")
            return

        # –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
        inventory_message = "–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n"
        for item in inventory_items:
            inventory_message += f"{item['name']} (x{item['count']})\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(inventory_message)


    async def get_loot(db, user_id, username):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
        user_exists = await db.fetchrow(
            "SELECT id FROM users WHERE tg_id = $1", user_id
        )

        if not user_exists:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            await db.execute(
                "INSERT INTO users(tg_id, username) VALUES($1, $2)",
                user_id, username
            )
            # –ü–æ–ª—É—á–∞–µ–º id –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_exists = await db.fetchrow(
                "SELECT id FROM users WHERE tg_id = $1", user_id
            )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        items = await db.fetch("SELECT * FROM items")

        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
        selected_item = random.choice(items)
        item_name = selected_item['name']
        item_id = selected_item['id']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        inventory = await db.fetchrow(
            "SELECT count FROM inventory WHERE user_id = $1 AND item_id = $2", user_exists['id'], item_id
        )
        
        if inventory:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            new_count = inventory['count'] + 1
            await db.execute(
                "UPDATE inventory SET count = $1 WHERE user_id = $2 AND item_id = $3",
                new_count, user_exists['id'], item_id
            )
            effect_message = f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {item_name} (x{new_count})!"
        else:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 1
            await db.execute(
                "INSERT INTO inventory (user_id, item_id, count) VALUES ($1, $2, $3)",
                user_exists['id'], item_id, 1
            )
            effect_message = f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {item_name}!"

        return f"üéâ –í—ã –Ω–∞—à–ª–∏ {item_name}! {effect_message}"

    @dp.callback_query(lambda c: c.data.startswith("ans_"))
    async def answer_callback(cb: types.CallbackQuery):
        user_id = cb.from_user.id
        idx = int(cb.data.split("_")[1])
        quiz = active_quiz.pop(cb.message.chat.id, None)
        if not quiz:
            return await cb.answer()

        battle = active_battles.get(cb.message.chat.id)
        sel = quiz["options"][idx]
        correct_answer = quiz["correct_answer"]
        

        if sel.strip() == correct_answer.strip():
            battle['hp'] -= quiz['dmg']
            if battle['hp'] <= 0:
                battle['hp'] = 0
                result = f"‚úÖ –í–µ—Ä–Ω–æ! –£—Ä–æ–Ω {quiz['dmg']}. –û—Å—Ç–∞–ª–æ—Å—å HP –≤—Ä–∞–≥–∞: {battle['hp']}"
                await cb.message.edit_text(result)
                congrats = f"üèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ <b>{battle['name']}</b>!"
                await cb.message.reply(congrats, reply_markup=main_kb)
                await log_action(db, user_id, congrats)
                # –õ–æ–≥–∏–∫–∞ –≤—ã–ø–∞–¥–µ–Ω–∏—è –ª—É—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                loot_message = await get_loot(db, cb.from_user.id, cb.from_user.username)  # –ü–æ–ª—É—á–∞–µ–º –ª—É—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await cb.message.reply(loot_message)
                await log_action(db, user_id, loot_message)

                # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –±–∏—Ç–≤—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ª–æ–∫–∞—Ü–∏–∏
                active_battles.pop(cb.message.chat.id, None)
                await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                await cmd_locations(cb.message)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –º–µ–Ω—é –ª–æ–∫–∞—Ü–∏–∏

            else:
                result = f"‚úÖ –í–µ—Ä–Ω–æ! –£—Ä–æ–Ω {quiz['dmg']}. –û—Å—Ç–∞–ª–æ—Å—å HP –≤—Ä–∞–≥–∞: {battle['hp']}"
                await cb.message.edit_text(result)
                # –ù–æ–≤–∞—è –∞—Ç–∞–∫–∞
                btns = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="ü•â –õ–∏–Ω–µ–π–Ω–æ–µ (10)", callback_data="quiz_1"),
                    InlineKeyboardButton(text="ü•à –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (20)", callback_data="quiz_2"),
                    InlineKeyboardButton(text="ü•á –ö—É–±–∏—á–µ—Å–∫–æ–µ (30)", callback_data="quiz_3")
                ]])
                await cb.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å –∞—Ç–∞–∫–∏:", reply_markup=btns)
        else:
            await handle_incorrect_answer(cb, quiz)

    async def handle_incorrect_answer(cb: types.CallbackQuery, quiz):
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await db.execute(
            "UPDATE characters SET hp=hp-$1 WHERE user_id=(SELECT id FROM users WHERE tg_id=$2)",
            quiz['dmg'], cb.from_user.id
        )
        rec2 = await db.fetchrow(
            "SELECT hp FROM characters WHERE user_id=(SELECT id FROM users WHERE tg_id=$1)",
            cb.from_user.id
        )
        if not rec2:
            return await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ.")
        
        if rec2['hp'] <= 0:
            await db.execute(
                "UPDATE characters SET hp=0 WHERE user_id=(SELECT id FROM users WHERE tg_id=$1)",
                cb.from_user.id
            )
            result = f"‚ùå –û—à–∏–±–∫–∞! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {quiz['dmg']} HP. –í–∞—à HP: {rec2['hp']}"
            await cb.message.edit_text(result)
            await cb.message.reply("üíÄ –í—ã –ø–æ–≥–∏–±–ª–∏! –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã. –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∏–≥—Ä–∞—Ç—å?", reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–∏–≥—Ä–∞—Ç—å", callback_data="replay")]]
            ))
            active_battles.pop(cb.message.chat.id, None)
        else:
            result = f"‚ùå –û—à–∏–±–∫–∞! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {quiz['dmg']} HP. –í–∞—à HP: {rec2['hp']}"
            await cb.message.edit_text(result)
            # –ù–æ–≤–∞—è –∞—Ç–∞–∫–∞
            btns = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="ü•â –õ–∏–Ω–µ–π–Ω–æ–µ (10)", callback_data="quiz_1"),
                InlineKeyboardButton(text="ü•à –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (20)", callback_data="quiz_2"),
                InlineKeyboardButton(text="ü•á –ö—É–±–∏—á–µ—Å–∫–æ–µ (30)", callback_data="quiz_3")
            ]])
            await cb.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å –∞—Ç–∞–∫–∏:", reply_markup=btns)

        await cb.answer()

    @dp.message(Command("stats"))
    async def cmd_stats(message: types.Message):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        logs = await db.fetch(
            """
            SELECT action, ts
            FROM logs
            WHERE user_id = (SELECT id FROM users WHERE tg_id = $1)
            ORDER BY ts DESC
            """, user_id
        )

        if not logs:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –≤ –ª–æ–≥–µ.")
            return

        # –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∞–º–∏
        logs_message = "–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        for log in logs:
            timestamp = log['ts'].strftime('%Y-%m-%d %H:%M:%S')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º .strftime –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ datetime
            logs_message += f"{timestamp} - {log['action']}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(logs_message)



    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        await db.close()

if __name__ == "__main__":
    asyncio.run(main())
